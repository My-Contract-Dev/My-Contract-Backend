import { CacheModule, DynamicModule, Module } from '@nestjs/common';
import * as redisStore from 'cache-manager-ioredis';
import IoRedis, { RedisOptions } from 'ioredis';
import cacheManager, { CacheManagerOptions } from '@type-cacheable/core';
import { useAdapter } from '@type-cacheable/ioredis-adapter';
import { CacheAsyncOptions } from './models';

@Module({
  imports: [],
})
export class AppCacheModule {
  static register(opts: RedisOptions): DynamicModule {
    cacheManager.setOptions(<CacheManagerOptions>{
      excludeContext: false, // Defaults to true. If you don't pass a specific hashKey into the decorators, one will be generated by serializing the arguments passed in and optionally the context of the instance the method is being called on.
      ttlSeconds: 0, // A global setting for the number of seconds the decorated method's results will be cached for.
    });
    const client = new IoRedis(opts);
    useAdapter(client);
    return {
      module: AppCacheModule,
      imports: [
        CacheModule.register<RedisOptions>({
          store: redisStore,
          ...opts,
        }),
      ],
    };
  }

  static registerAsync(opts: CacheAsyncOptions): DynamicModule {
    return {
      module: AppCacheModule,
      imports: [
        CacheModule.registerAsync<RedisOptions>({
          imports: opts.imports,
          inject: opts.inject,
          useFactory: opts.useFactory,
        }),
        ...(opts.imports || []),
      ],
      providers: [
        {
          provide: 'CACHE_OPTIONS',
          inject: opts.inject,
          useFactory: async (...args) => {
            const redisOptions = await opts.useFactory(...args);
            cacheManager.setOptions(<CacheManagerOptions>{
              excludeContext: false, // Defaults to true. If you don't pass a specific hashKey into the decorators, one will be generated by serializing the arguments passed in and optionally the context of the instance the method is being called on.
              ttlSeconds: 0, // A global setting for the number of seconds the decorated method's results will be cached for.
            });
            const client = new IoRedis(redisOptions);
            useAdapter(client);
          },
        },
      ],
    };
  }
}
